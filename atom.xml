<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bartj3]]></title>
  <link href="http://www.bartvanzon.com/atom.xml" rel="self"/>
  <link href="http://www.bartvanzon.com/"/>
  <updated>2013-11-05T19:10:22+01:00</updated>
  <id>http://www.bartvanzon.com/</id>
  <author>
    <name><![CDATA[Bart van Zon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting on your vimconfig]]></title>
    <link href="http://www.bartvanzon.com/blog/2013/11/04/starting-on-your-vimconfig/"/>
    <updated>2013-11-04T19:47:00+01:00</updated>
    <id>http://www.bartvanzon.com/blog/2013/11/04/starting-on-your-vimconfig</id>
    <content type="html"><![CDATA[<p>Once you&rsquo;ve installed Vim(didn&rsquo;t install it yet?
<a href="http://www.bartvanzon.com/blog/2013/11/03/getting-started-with-vim/">check out this blogpost</a>) it&rsquo;s time
to setup your configuration file, where the Vim magic happens. Vim
configurations are different for each developer, you start out with a blank
configuration file, or maybe with a copy of a vimrc of a developer you know and
over the years as you grow as a developer your vimrc will grow with you.</p>

<!-- more -->


<p>Your vimrc is something to be proud of, it shows what awesome work flow
improvements you&rsquo;ve made and it shows how you know how to mold your tools
completely to work for you. A lot of developers share their dot files on GitHub
and if the developer&rsquo;s a Vim user it&rsquo;s very likely you can find his vimrc there
as well. Vims configuration file can be found in <code>~/.vimrc</code>, and obviously the
best way to edit it is in Vim. But as you might need some time to get used to
editing text and navigating through it in Vim you could of course open it in
your (previous) favorite text editor as well.</p>

<p>I&rsquo;ll show you some of the lines you can put in your vimrc that I have in there,
and of which I believe you really can&rsquo;t do without. If you would like to know
more about a setting then I explained about it, remember that you can use Vim
help for all of this stuff (for example <code>:h nocompatible</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell Vim to actually behave like Vim, and not try to be compatible
with Vi. An old editor which was created way before I was even born, so I can&rsquo;t
really be bothered about compatibility with it. I should probably look up what
the exact differences are but I was told this should be in there, so now I&rsquo;m
telling you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">syntax</span> enable
</span></code></pre></td></tr></table></div></figure>


<p>Tell Vim to use color syntax highlighting, this will make coding a lot more
pleasant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Left<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use h&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Right<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use l&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Up<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use k&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Down<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use j&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I actually don&rsquo;t have these in my vimrc anymore but used to have this for quite
a while. In Vim you really (really!) shouldn&rsquo;t use the arrow keys for
navigation, I had a hard time doing so, so I used this set of configurations to
disable the key and tell me what key to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">autoindent</span>
</span><span class='line'><span class="k">set</span> <span class="nb">smartindent</span>
</span><span class='line'><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">set</span> <span class="nb">expandtab</span>
</span><span class='line'><span class="k">set</span> <span class="nb">copyindent</span>
</span><span class='line'><span class="k">set</span> <span class="nb">listchars</span><span class="p">=</span><span class="k">tab</span>:··<span class="p">,</span>trail:·
</span><span class='line'><span class="k">set</span> <span class="nb">list</span>
</span></code></pre></td></tr></table></div></figure>


<p>Auto indentation makes your life easier, these settings won&rsquo;t only take care of
your indentation, they will also make sure you&rsquo;re using spaces instead of tabs
for indentation. And last but not least they&rsquo;ll show you if the person before
you messed his tabs/spaces up by showing tabs in your code and showing trailing
spaces. The whole tabs vs spaces ends up being your personal preference so you
might want to tweak this to match your own preference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">cursorline</span>
</span></code></pre></td></tr></table></div></figure>


<p>It highlights the entire line your cursor is on, not quite a must have, but I
think it just makes coding a bit more pleasant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">colorcolumn</span><span class="p">=</span><span class="m">80</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should really try to keep your lines shorter then 80 characters, it makes
your code way easier to read and has the nice advantage that you can actually
split screen your code on a laptop as well. This setting will draw a line at the
80 character limit, it&rsquo;s not prohibiting you from creating longer lines, but
just subtly reminding you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> mapleader<span class="p">=</span><span class="s2">&quot;,&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of the shortcuts in Vim use the leader key to trigger them, (and the longer
you&rsquo;re developing the more you&rsquo;ll create) the default leader key however is <code>\</code>
which is pretty annoying, the comma is easy to reach so mapping the leader key to
your comma will make a lot of your shortcuts easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">backspace</span><span class="p">=</span><span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default Vim can have some pretty weird behaviors, this corrects one of them.
For example: Vim won&rsquo;t remove newlines with backspace by default. Annoying!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="k">history</span><span class="p">=</span><span class="m">1000</span>
</span></code></pre></td></tr></table></div></figure>


<p>When using Vim in normal mode (where you enter the commands) you can navigate
through your previous commands using the arrow keys, by default it stores the
last 20 commands you gave Vim which normally should be more then enough. But it
never hurts to be safe, in case you forgot that awesome command you used a while
ago.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">relativenumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an incredible setting which took me way to long to find, navigating to
Vim can be a guess sometimes, you want to delete the piece of code in the next
couple of lines but how many lines is it exactly? You&rsquo;re at line 15, the other
code is at line 29, so thats 14 lines&hellip; These simple calculations will take a
slight amount of your time which would have been better spend coding. Relative
numbers will show you relative line numbers. Which means that in the gutter
where normally the line numbers start with 1 at the top of the file and go down
the gutter will show the current line as 0, the line above and below it as 1,
and above and below that as 2 etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>
</span></code></pre></td></tr></table></div></figure>


<p>This one should be pretty obvious: it sets the character encoding used inside
Vim, it&rsquo;s not default though so make sure you set it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="k">k</span> gk
</span><span class='line'>nmap <span class="k">j</span> gj
</span></code></pre></td></tr></table></div></figure>


<p>When using <code>k</code> and <code>j</code> to navigate up and down your code you expect to go to the
next line on your screen, thats not default though. Vim will send you to the
next line in the file, which if Vim wrapped the line because your screen&rsquo;s too
small might not be exactly what you meant. This completely annoyed me so I
remapped <code>k</code> and <code>j</code> to <code>gk</code> and <code>gj</code> which will make them behave like I want
them to.</p>

<p>These configurations are just the tip of the iceberg, there are way more options
to configure, but these should get you started. Make sure to browse through
other people&rsquo;s configurations as often as possible to learn new tricks and keep
tweaking your configuration to make your Vim the best there is.</p>

<p>I&rsquo;ll be writing more posts about Vim (<a href="http://www.bartvanzon.com/blog/categories/vim/">read more</a>), so
make sure to read those too, expect articles about plugins, workflows and more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Vim]]></title>
    <link href="http://www.bartvanzon.com/blog/2013/11/03/getting-started-with-vim/"/>
    <updated>2013-11-03T10:20:00+01:00</updated>
    <id>http://www.bartvanzon.com/blog/2013/11/03/getting-started-with-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started using Vim about a year ago, so I&rsquo;m definitely not an experienced
user. But along the way I&rsquo;ve learned some neat tricks which I would like to
share with you.</p>

<!-- more -->


<p>First there&rsquo;s installing Vim itself, sure if you&rsquo;re a Mac user Vim comes
preinstalled. But if you want it to play nice with some of the available plugins
you&rsquo;ll need a Vim that&rsquo;s been compiled with Ruby support. On a Mac there&rsquo;s a
couple ways to do it:<br/>
<strong>The awesome way</strong>: Google like crazy, find the correct
files, setup the configuration properly and compile it yourself. I&rsquo;ve tried this
a while ago and got this working in a couple of hours, sadly I broke it several
weeks later and never got it working again.<br/>
Luckily there&rsquo;s another way, <strong>The lazy way</strong>: <code>brew install macvim</code></p>

<p>Once you&rsquo;ve got Vim running it&rsquo;s time for the hard part, actually using it. When
you&rsquo;re coming from an editor like Textmate or Sublime or maybe even a complete
IDE Vim will take some getting used to. Luckily Vim has an insanely good
help file. When you start Vim just access it by typing <code>:h</code>. EVERYTHING is
different in Vim, and made for developer happiness, even something as simply
navigation through a file. Sure you can use the arrow keys to move around, but
there&rsquo;s ways way more effective than that, and the help file will slowly guide
you through those ways. Just start reading the help file and instead of an
enormous list of options it&rsquo;ll tell you step by step how to get started. After
you&rsquo;ve got the basic hang of (very simple) navigation it&rsquo;ll suggest you to use
vimtutor and I completely agree. Vimtutor is an awesome tool to learn the Vim
basics.</p>

<p>Once you&rsquo;ve installed Vim and worked your way through Vimtutor it&rsquo;s time to
configure Vim to your own taste, I&rsquo;ll explain where to get started in a blogpost
tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching Postgresql on a Mac]]></title>
    <link href="http://www.bartvanzon.com/blog/2013/11/02/switching-postgresql-on-a-mac/"/>
    <updated>2013-11-02T09:03:00+01:00</updated>
    <id>http://www.bartvanzon.com/blog/2013/11/02/switching-postgresql-on-a-mac</id>
    <content type="html"><![CDATA[<p>Earlier today I decided to switch from <a href="http://postgresapp.com">Postgres.app</a> to
a simple homebrew install of postgresql. Not because I&rsquo;m not satisfied with the
app but I think it&rsquo;s just a bit overkill to start up a database. Together with
the <a href="https://github.com/mperham/lunchy">lunchy gem</a> (a launchctl wrapper)
I found yesterday switching should be a piece of cake. So I threw Postgres.app
in the trashbin. Entered <code>brew install postgresql</code> and everything was supposed
to be unicorns and rainbows.</p>

<!-- more -->


<p>However I kept getting this error when trying to interact with the database via
Rails:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>could not connect to server: No such file or directory
</span><span class='line'>Is the server running locally and accepting
</span><span class='line'>connections on Unix domain socket "/var/pgsql_socket/.s.PGSQL.5432"?</span></code></pre></td></tr></table></div></figure>


<p>I had absolutely no clue where to look but after a while of messing around I
figured it out, the <code>pg</code> gem I use with Rails was installed with the old
Postgresql installed. And now I switched databases it couldn&rsquo;t connect anymore.
The solution is simple, <strong>just uninstall the pg gem and reinstall it</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The world of Objective-C through Ruby eyes]]></title>
    <link href="http://www.bartvanzon.com/blog/2013/10/30/the-world-of-objective-c-through-ruby-eyes/"/>
    <updated>2013-10-30T20:45:00+01:00</updated>
    <id>http://www.bartvanzon.com/blog/2013/10/30/the-world-of-objective-c-through-ruby-eyes</id>
    <content type="html"><![CDATA[<p>My contract says <em>Developer</em> which might sound a bit allround but up until
recently 95% of the development I did was Ruby on Rails. With a rare sidestep
to Actionscript, Objective-C, Coffeescript, plain Ruby and more. I&rsquo;ve always
wanted to do some more Objective-C and in my spare time I&rsquo;ve made one or two
apps in the past (actually one finished and about 10 started but never finished
;)) But I believe the only way to learn something properly is by doing it 40
hours a week. So a couple of weeks ago I&rsquo;ve finally had the luck that we
(Wirelab) got an Objective-C job and it was quiet enough for me to focus on
picking up Objective-C and building the app.</p>

<p>As I&rsquo;m a Ruby developer and more specifically a Rails developer I&rsquo;m quite a lazy
developer. When I run into a problem more often then not there&rsquo;s a gem to solve
it for me or there&rsquo;s a blog that explains step by step how to solve it. Rarely
I spend days or even hours on a single problem anymore.</p>

<!-- more -->


<p>So it was quite a shock for me to find the state the Objective-C &ldquo;community&rdquo; is
in. I say &ldquo;community&rdquo; because I&rsquo;ve probably looked for it in the wrong places,
but the blogposts, tutorials and stack overflow answers (and questions) seem to
be of a poor quality compared with Ruby. The pride that ruby developers have in
their work doesn&rsquo;t seem to be present in the Objective-C scene: if it works its
good.</p>

<p>I don&rsquo;t want my code to work, I want my code to <strong>shine</strong>. I&rsquo;ve been lucky to
have a friend who&rsquo;s an experienced Objective-C developer that has been pushing
me in the right direction last couple of weeks because I haven&rsquo;t found the
shining ambition a lot online. Like I&rsquo;ve said before maybe I&rsquo;ve just been
looking in the wrong places so please do correct me if I&rsquo;m wrong. One awesome
thing the Objective-C community does have is <a href="http://cocoapods.org/">Cocoapods</a>.
On there I&rsquo;ve found great pods (Objective-C&rsquo;s gems) like
<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>,
<a href="https://github.com/samvermette/SVProgressHUD">SVProgressHUD</a>,
<a href="https://github.com/gotosleep/JASidePanels">JASidePanels</a> and many more. It&rsquo;s
not only an easy way to find these gems to make your life easier, it&rsquo;s also a
place to display your own shining code. (There is one thing wrong with these pods
though&hellip; They&rsquo;re named after the thing they actually do! Aweful, I&rsquo;ve always
loved the smart gem names like Nokogiri, Capybara and Koala.</p>

<p>I want to share my way of being a lazy developer with the Objective-C developers
so I&rsquo;ve decided to build some gems, or actually I should say pods. As a fresh
developer I will probably mess some things up badly, but I might also fix some
stuff thats weird for me but the experienced developers take for granted.</p>

<p>Last week I&rsquo;ve worked on <code>NSDate+RelativeTime</code>, a pod you can find on
<a href="http://cocoapods.org/?q=nsdate%20relative%20time%20bart">Cocoapods</a> or on
<a href="https://github.com/bartj3/NSDate-RelativeTime">GitHub</a>. It got some positive
feedback since I&rsquo;ve posted it so I&rsquo;ll assume people are using it. Sadly there&rsquo;s
no actual stats on pod usage like there is with Rubygems. And I&rsquo;ve got another
pod in the works.</p>

<p>I&rsquo;m pretty satisfied with the result as it solves a problem I ran into a couple
of weeks ago and there didn&rsquo;t seem to be anything like this yet so I hope it
helps some other developers be lazy like me.</p>

<p>A thing in the pod that definitely doesn&rsquo;t shine yet is it&rsquo;s tests. Testing
with Objective-C, and especially continuous integration seems to be way harder
then it is with Ruby. And most of the resources I found were outdated. It
frustrates me I need to generate an entire project while there&rsquo;s only one file
with actual tests. And besides that only IOS is tested while it should work fine
on OSX as well, but I don&rsquo;t have the tests to prove it. If there&rsquo;s anyone out
there who would like to pair with me to get some more robust tests running and
getting some kind of CI setup that&rsquo;d be awesome.</p>

<h3>I&rsquo;m a lazy developer and working on making Objective-C developers just as lazy as me!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up your shell: oh-my-zsh]]></title>
    <link href="http://www.bartvanzon.com/blog/2013/10/16/setting-up-your-shell-oh-my-zsh/"/>
    <updated>2013-10-16T21:47:00+02:00</updated>
    <id>http://www.bartvanzon.com/blog/2013/10/16/setting-up-your-shell-oh-my-zsh</id>
    <content type="html"><![CDATA[<p>Up until not too long ago I barely used the terminal, I used it when absolutely
necessary but whenever it was possible I immediately switch to a GUI for
whatever I was doing. After reading yet another &ldquo;Why Vim is awesome&rdquo; blog I
decided to make the switch from Textmate to Vim. And once I was editing in Vim
I noticed that I was more productive by just fullscreening my terminal and
staying in the terminal as much as possible. Without continuously switching
between my mouse and keyboard I got faster and faster at the stuff I do most
of my day: coding and everything related to it. Since then I&rsquo;ve been trying to
optimize my work flow as much as possible.</p>

<!-- more -->


<p>The first step to having a pleasant terminal environment is getting the proper
shell. I&rsquo;ve picked <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>. Not
because I think zsh is way better then bash or the few other alternatives,
because I honestly wouldn&rsquo;t know whether it&rsquo;s actually better. But because
oh-my-zsh is crazy simple to install and configure, and instantly gives you
awesome benefits. One of the biggest is the auto completion, especially when
just getting started in terminal it&rsquo;s great when you vaguely remember a command
that you can just press tab and it&rsquo;ll suggest a bunch of commands for you to
use. Another great one is the theming options that come with oh-my-zsh. The
starting theme is awesome on itself, but whenever you have some spare time you
should really try customizing a theme to your own desire.</p>

<p>Installing
Obviously they&rsquo;ve got installing instructions
<a href="https://github.com/robbyrussell/oh-my-zsh">on their github page</a>, however if
you&rsquo;re a mac user installing oh-my-zsh is just a simple oneliner:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</span></code></pre></td></tr></table></div></figure>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet another shot]]></title>
    <link href="http://www.bartvanzon.com/blog/2013/10/15/yet-another-shot/"/>
    <updated>2013-10-15T08:07:00+02:00</updated>
    <id>http://www.bartvanzon.com/blog/2013/10/15/yet-another-shot</id>
    <content type="html"><![CDATA[<p>Over the years I tried blogging a couple of times. However for some reason I
never seemed able to get some rhythm in it, to keep blogging. The last article
on this blog is well over a year old. And the day I wrote it I was sure it was
the first of many more to come. The post got some traction on
<a href="https://news.ycombinator.com">Hacker News</a> and I got some great feedback.
However the article was a rant, and rants always seem to get traction, and are
the easiest to write.</p>

<!-- more -->


<p>Last couple of months I&rsquo;ve had the honor to be invited to speak at a couple of
usergroups and conferences, and I got some great feedback. People were
enthoustiastic about what I had to tell them, a surprise to me because I thought
my skills to be pretty mediocre. Turns out that I might be comparing myself with
the wrong people. There&rsquo;ll always be some guy better at Vim, or some guy better
at Ruby, and sadly for me plenty of guys better at skateboarding and
snowboarding&hellip; but (this sounds obvious but wasn&rsquo;t to me) as it turns out
there&rsquo;s a lot of people that have different focusses when learning new things.
People I can definately teach some new tricks.</p>

<p>Inspired by <a href="http://blog.jenniferdewalt.com/post/62998082815/after-180-websites-im-ready-to-start-the-rest-of-my">Jennifer Dewalt</a>
who created 180 websites in 180 days, and <a href="http://swizec.com/blog/inspired-by-the-180-websites-i-will-understand-52-academic-papers-in-52-weeks/swizec/6365">Swizec Teller</a>
whose plan it is to understand 52 academic papers in 52 weeks I&rsquo;ve set my own
goal: I&rsquo;m not going to do anything daily, that&rsquo;ll drive me crazy but I will try
to blog as often as possible with an absolute minimum of 2 blogs a week. They
don&rsquo;t have to be pagelong stories, they could be glorified tweets, but as a
fulltime developer I learn something new every day and I experience something
weird at least once an hour.</p>

<p>So expect some rants but hopefully mostly tips about vim, tmux, ruby, my
workflow, my workspace, crazy hacks, conferences, weird experiences and more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Supporting IE is too much work]]></title>
    <link href="http://www.bartvanzon.com/blog/2012/05/09/supporting-ie-is-too-much-work/"/>
    <updated>2012-05-09T12:10:00+02:00</updated>
    <id>http://www.bartvanzon.com/blog/2012/05/09/supporting-ie-is-too-much-work</id>
    <content type="html"><![CDATA[<p>This is a rant, with lots of bitching and crying, if you hate those rants, stop reading now.</p>

<p>You&rsquo;ll need to know about two posts before this will make any sense:</p>

<p>Yesterday the bitching about IE seemed to be worse than normal. I believe it started with the post <a href="https://paydirtapp.com/blog/we-dont-support-ie/">&ldquo;We don&rsquo;t support Internet Explorer, and we&rsquo;re calling that a feature&rdquo;</a> by <a href="https://twitter.com/#!/paydirtapp">@Paydirt</a>.
When reading the article i was thinking about the insane amount of time i spend on getting sites to work on IE6 and reading that only 1.63% of their traffic uses IE, it makes sense not to support it.</p>

<!-- more -->


<p>However later that day i read this post &ldquo;<a href="http://blog.reybango.com/2012/05/08/hey-paydirt-your-site-works-just-fine-in-ie/">Hey Paydirt: Your Site Works Just Fine in IE</a>&rdquo; by <a href="https://twitter.com/#!/reybango">@reybango</a>, which shows that the not supporting feature of IE, actually is a feature. A bug would be that they didn&rsquo;t test it, and it doesn&rsquo;t work, but they actually put effort in the not supporting of IE. Which&hellip; in my eyes&hellip; is absolutely insane. They check if the browser is IE and just remove all of the users options, not because it doesn&rsquo;t work in IE, but because they &ldquo;have this feature&rdquo;.</p>

<p>I haven&rsquo;t done html/css frontend development in quite some time so i have absolutely no experience with IE9/10 myself, it was a pleasent surprise reading that most of the new stuff that&rsquo;s supported by chrome and firefox is now supported in IE as well&hellip;</p>

<p>So here&rsquo;s this company actively trying to make the browser experience worse for users with IE, not because it doesn&rsquo;t support certain features but just because it wants to play the &ldquo;IE sucks&rdquo; feeling. What shocked me even more is the amount of comments saying that &ldquo;supporting IE is too much work&rdquo;, not because it still costs the crazy amount of time it used to (ie6), but because they&rsquo;re developing on a Mac.</p>

<p>Testing in IE is too much works&hellip; because they&rsquo;re on a Mac.</p>

<h1>WHAT?</h1>

<p>And it&rsquo;s not just one or two persons saying it, but there&rsquo;s quite some people bitching (yes bitching!) about it.</p>

<blockquote><p>&ldquo;One of the reasons I don’t test stuff in IE as much as I’d like is because there’s not a slick way to do it on a Mac.&rdquo;</p>

<p>&ldquo;I think Microsoft needs to look at better solutions for allowing Mac developers to test IE.&rdquo;</p>

<p>&ldquo;It’s expensive getting hardware to test on, taking time to test it, making sure you have a windows installation&rdquo;</p>

<p>&ldquo;To debug in any browser I can do it on a mac (decent dev env) to debug in IE I need a dev environment in windows. Enjoy setting that one up.&rdquo;</p></blockquote>

<p>Let me get this straight, you&rsquo;re a frontend developer, you picked a system which makes development easier (or not, not going to start a mac/pc flamewar here). However fact is that probably most of your users use windows, and you can&rsquo;t be bothered to test it on windows?</p>

<h3>You should get another job</h3>

<p>Seriously, if <em>&ldquo;no slick way&rdquo;</em> is a good reason not to test, you should be flipping burgers instead of developing. Your main job is development, not being a hipster.</p>

<p>If i offended some people with this post, i&rsquo;m sorry, it&rsquo;s not personal, just my rant about lazy frontend developers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://www.bartvanzon.com/blog/2012/02/15/hello-world/"/>
    <updated>2012-02-15T16:07:00+01:00</updated>
    <id>http://www.bartvanzon.com/blog/2012/02/15/hello-world</id>
    <content type="html"><![CDATA[<p>This is my hello world post to see if everything is working. Actually this is my second hello world, i messed up the source/master separation in the first repo ;)</p>
]]></content>
  </entry>
  
</feed>
